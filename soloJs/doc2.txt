
function checkForBuildingOpportunities(){
     //return the best configuration, and apply it 
     //monopolyProperties sorted by the properties with the highest value     


    for(i=0; i < monopolyProperties.length; i++){



        //should I build on it?


        //nodes : I build , I don't build


        simulateBuildingConfig(,depth - 

    }
 



}



// I need to create a map with all the valid configurations) => How to get it. 


//I need to take each element starting from the first property (property with the highest value).


//Then , nodes => Don't build, go to the next, build (only valid moves are available (including a possibility of reorganizing the array)).


//The iteration stops when all the properties were checked. Indeed, if there was a way to build before without doing this one, it exists




               //property1             //property2        //property3           //property4            //property5          //property6        //property7            //property8      


    //build a house     //dont build


//build a house     //dont build

                //property2     //property3       //property4 







for(i=0; i < monopolyProperties.length ; i++){

       
       //loop on all the possibilities for this property 


        

}



//Break the loop if cash is less than 50 or if we looped on all properties.




  //What we want => use DFS to check for all the configurations.


  //At the end, we want to obtain an array with a list of instructions => [build 1 property on house 2  , build 1 property on house 3.. ];


  //At the end, calculate le rendement de chacunes de ces propriétés.




//Whenever there are instructions, apply them.


//We choose the instruction that apply the most damage => most addition of expected cash 


{ action: mortgage , property: property}



Apply config => [{action: mortgage: , property: rueDeLaPaix} , {action: buy , property: rueDeCourcelle  } , { action: buy , property: rueDeCourcelle } , { action: reorganize , housesOrganization : [ 2 , 2 , 1 ] } , { action : build, properties: bdMalesherbes  }];





function buildPropertyConfig( activePlayer , monopolyProperties, actionsArray , count , cash){
       


        if(count > monopolyProperties.length || cash < 50 ){

            return;
        }
          

         //possibilities => Build, do nothing
         //do nothing (remove this property from the array)
        
         let updatedMonopolyProperties = monopolyProperties.slice(0);
    
          updatedMonopolyProperties.splice(0,1);
           
         buildPropertyConfig( updatedMonopolyProperties , actionsArray , count++, cash);


         //build 


         let updatedCash = cash -= monopolyProperties[0].value;


         let updatedActionsArray = actionsArray.slice(0);


          buildPropertyConfig( monopolyProperties , updatedActionsArray, count , updatedCash );
          



}



